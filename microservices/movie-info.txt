MovieInfoServiceApplication:
---------------------------
package com.htc;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;

@SpringBootApplication
@EnableEurekaClient
public class MovieInfoServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(MovieInfoServiceApplication.class, args);
	}

}

MovieInfo:
---------
package com.htc.beans;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "movie_info")
public class MovieInfo 
{
	@Id
	@Column(name = "movie_id")
	private String movieId;
	@Column(name="movie_name")
	private String movieName;
	@Column(name="movie_director")
	private String movieDirector;
	
	public MovieInfo()
	{
		
	}

	public MovieInfo(String movieId, String movieName, String movieDirector) {
		super();
		this.movieId = movieId;
		this.movieName = movieName;
		this.movieDirector = movieDirector;
	}

	public String getMovieId() {
		return movieId;
	}

	public void setMovieId(String movieId) {
		this.movieId = movieId;
	}

	public String getMovieName() {
		return movieName;
	}

	public void setMovieName(String movieName) {
		this.movieName = movieName;
	}

	public String getMovieDirector() {
		return movieDirector;
	}

	public void setMovieDirector(String movieDirector) {
		this.movieDirector = movieDirector;
	}

	@Override
	public String toString() {
		return "MovieInfo [movieId=" + movieId + ", movieName=" + movieName + ", movieDirector=" + movieDirector + "]";
	}
	
}

MovieInfoController:
-------------------
package com.htc.controller;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.htc.beans.MovieInfo;
import com.htc.service.MovieInfoService;

@RestController
public class MovieInfoController 
{
	@Autowired
	private MovieInfoService movieInfoService;
	
	@GetMapping("/movie-info/movie-list")
	public List<MovieInfo> getAllUser() {
		return movieInfoService.getAllUsers();
	}
	
	@GetMapping("/movie-info-id/{id}")
	public MovieInfo getMovieById(@PathVariable("id") String movieId)
	{
		return movieInfoService.getMovieById(movieId);
	}
	
	@PostMapping("/movie-info/add-movie")
	public MovieInfo addMovieInfoData(@RequestBody MovieInfo movieInfo)
	{
		return movieInfoService.addMovieInfo(movieInfo);
	}
	
}


MovieInfoRepository:
-------------------
package com.htc.service;

import org.springframework.data.jpa.repository.JpaRepository;
import com.htc.beans.MovieInfo;

public interface MovieInfoRepository extends JpaRepository<MovieInfo, String>
{
	
}

MovieInfoService:
----------------
package com.htc.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.htc.beans.MovieInfo;

@Service
public class MovieInfoService {
	@Autowired
	private MovieInfoRepository movieInfoRepository;

	public List<MovieInfo> getAllUsers() {
		List<MovieInfo> movieRecords = new ArrayList<>();
		movieInfoRepository.findAll().forEach(movieRecords::add);
		return movieRecords;
	}

	public MovieInfo getMovieById(String movieId) {
		Optional<MovieInfo> optional=movieInfoRepository.findById(movieId);
		return optional.get();
	}
	
	public MovieInfo addMovieInfo(MovieInfo movieInfo)
	{
		return movieInfoRepository.save(movieInfo);
	}
}


application.properties:
----------------------
server.port=8081
spring.application.name=movie-info-service
#Database settings.
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=9790270846

pom.xml:
-------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.htc</groupId>
	<artifactId>rabbitmqdemo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>movie-info-service</name>
	<description>Demo project for Spring Boot Using Restful web services</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>
				spring-cloud-starter-netflix-eureka-client
			</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.amqp</groupId>
			<artifactId>spring-rabbit-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Hoxton.SR8</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
</project>

