MovieRatingServiceApplication:
-----------------------------
package com.htc;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;

@SpringBootApplication
@EnableEurekaClient
public class MovieRatingServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(MovieRatingServiceApplication.class, args);
	}

}

MovieRating:
-----------
package com.htc.beans;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="movie_rating")
public class MovieRating 
{
	@Id
	@Column(name="movie_id")
	private String movieId;
	@Column(name = "movie_rating")
	private String movieRating;
	
	public MovieRating()
	{
		
	}

	public MovieRating(String movieId, String movieRating) {
		super();
		this.movieId = movieId;
		this.movieRating = movieRating;
	}

	public String getMovieId() {
		return movieId;
	}

	public void setMovieId(String movieId) {
		this.movieId = movieId;
	}

	public String getMovieRating() {
		return movieRating;
	}

	public void setMovieRating(String movieRating) {
		this.movieRating = movieRating;
	}

	@Override
	public String toString() {
		return "MovieRating [movieId=" + movieId + ", movieRating=" + movieRating + "]";
	}
	
}

MovieRatingController:
---------------------
package com.htc.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.htc.beans.MovieRating;
import com.htc.beans.MovieRatingList;
import com.htc.service.MovieRatingService;

@RestController
public class MovieRatingController 
{
	
	@Autowired
	private MovieRatingService movieRatingService;
	
	@GetMapping("/movie-rating-list")
	public List<MovieRating> getAllMovieRatings()
	{
		return movieRatingService.getAllMovieRatings();
	}
	
	@GetMapping("/movie-rating/{id}")
	public MovieRating getMovieRatingById(@PathVariable("id") String movieId)
	{
		return movieRatingService.getMovieById(movieId);
	}
	
	@PostMapping("/movie-rating/add-movie")
	public MovieRating addMovieRating(@RequestBody MovieRating movieRating)
	{
		return movieRatingService.addMovieRating(movieRating);
	}
	
}


MovieRatingRepository:
---------------------
package com.htc.service;

import org.springframework.data.jpa.repository.JpaRepository;
import com.htc.beans.MovieRating;

public interface MovieRatingRepository extends JpaRepository<MovieRating, String>
{
	
}

MovieRatingService:
------------------
package com.htc.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.htc.beans.MovieRating;

@Service
public class MovieRatingService 
{
	@Autowired
	private MovieRatingRepository movieRatingRepository;
	
	public List<MovieRating> getAllMovieRatings() {
		List<MovieRating> movieRatings = new ArrayList<>();
		movieRatingRepository.findAll().forEach(movieRatings::add);
		return movieRatings;
	}

	public MovieRating getMovieById(String movieId) {
		Optional<MovieRating> optional=movieRatingRepository.findById(movieId);
		return optional.get();
	}
	
	public MovieRating addMovieRating(MovieRating movieRating)
	{
		return movieRatingRepository.save(movieRating);
	}
}


application.properties:
----------------------
server.port=8082
spring.application.name=movie-rating-service
#Database settings.
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=9790270846

pom.xml:
-------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.htc</groupId>
	<artifactId>movie-rating</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>movie-rating-service</name>
	<description>Demo project for Spring Boot Using Restful web services</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>
				spring-cloud-starter-netflix-eureka-client
			</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.amqp</groupId>
			<artifactId>spring-rabbit-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Hoxton.SR8</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
</project>
